generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model Budget {
  id          Int      @id @default(autoincrement())
  userId       String
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  accounts Account[]
  categories Category[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)


}

model Account {
  id          Int      @id @default(autoincrement())
  userId       String
  type         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  balance      Decimal       @db.Decimal(10, 2)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetId     Int
  budget       Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  categoryId Int? @unique
  linked   Category?

}

model Transaction {
  id          Int      @id @default(autoincrement())
  accountId Int
  date      DateTime
  payee     String ?
  category  Int ?
  memo      String ?
  inflow    Decimal  @db.Decimal(10, 2)
  outflow   Decimal  @db.Decimal(10, 2)
  userId    String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type      String ?

}

model Category {
  id          Int      @id @default(autoincrement())
  userId       String
  spent        Decimal
  due          DateTime ?
  frequency    String
  name         String
  currentValue Decimal
  maxValue     Decimal
  budgetId     Int
  budget       Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  adjustment CategoryAdjustment[]
  accountId   Int ? @unique
  linked Account ?  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model CategoryAdjustment {
  id          Int      @id @default(autoincrement())
  userId      String
  categoryId  Int
  value       Decimal
  createdAt   DateTime      @default(now())
  window       DateTime      @default(now())
  category Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


model User {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  budgets Budget[]
  activeBudget Int ?
  customerId String? @unique
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  referralCode String? @unique
  referral   Referral? @relation(fields: [referralCode], references: [code], onDelete: Cascade, onUpdate: Cascade)


}

model Referral {
  code  String  @id
  userId  String
  createdAt DateTime  @default(now())
  earned Int @default(0)
  user          User?
}


model Customer {
  id          String  @id
  userId      String  @unique
  createdAt   DateTime      @default(now())

  subscriptionId String ?
  subscriptionStatus String ?
  user          User? 

}


// alter table public."Account" alter column balance set data type numeric(10,2);
// alter table public."Transaction" alter column inflow set data type numeric(10,2);
// alter table public."Transaction" alter column outflow set data type numeric(10,2);

// alter table public."Category" alter column "currentValue" set data type numeric(10,2);
// alter table public."Category" alter column "maxValue" set data type numeric(10,2);
// alter table public."Category" alter column "spent" set data type numeric(10,2);